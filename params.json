{"name":"Recommendations","tagline":"","body":"### Recommendations Intro\r\nThere are several different types of recommendation systems. Item-to-Item based recommending systems bind items to different features. When a user buys a particular item, the recommender  application will return a list of the items which share those same features. Another method is a user-to-user based recommending system. In this method, users are paired with items selected by users who have selected the same products as the user. There are even more accurate methods of creating recommendations which use both user and item data, such as matrix factorization. However, we will cover how to implement a user-to-user based recommendation system for an e-commerce application.\r\n\r\n### Creating the Database\r\nThe database requires three main tables: User, Product, and Transaction. The Transaction table binds the user to the product they purchased.\r\n\r\nAdd these lines of code to a sql file.\r\n```\r\nCREATE DATABASE IF NOT EXISTS Recommender;\r\nUSE Recommender;\r\n\r\nCREATE TABLE IF NOT EXISTS User(\r\nUserID int NOT NULL AUTO_INCREMENT,\r\nUserName varchar(50),\r\nPRIMARY KEY (UserID)\r\n);\r\n\r\nCREATE TABLE IF NOT EXISTS Product(\r\nProductID int NOT NULL AUTO_INCREMENT,\r\nProductName varchar(225),\r\nPRIMARY KEY (ProductID)\r\n);\r\n\r\nCREATE TABLE IF NOT EXISTS Transaction(\r\nTransactionID int NOT NULL AUTO_INCREMENT,\r\nUserID int NOT NULL,\r\nProductID int NOT NULL,\r\nPRIMARY KEY (TransactionID),\r\nFOREIGN KEY (UserID) REFERENCES User(UserID),\r\nFOREIGN KEY (ProductID) REFERENCES Product(ProductID)\r\n);\r\n```\r\n\r\n### Insert Test Data\r\nNow that the database is created, it is time to load it with test data.\r\nAdd these lines of code to the same sql file.\r\n```\r\nINSERT INTO User\r\n(UserName)\r\nValues\r\n('Jake Osselear'),\r\n('Stefan Popov'),\r\n('Aakash Patel');\r\n\r\nINSERT INTO Product\r\n(ProductName)\r\nValues\r\n('Cat Food'),\r\n('Carpet Cleaner'),\r\n('DVD Player');\r\n\r\nINSERT INTO Transaction\r\n(UserID, ProductID)\r\nValues\r\n(1,1),\r\n(2,1),\r\n(1,2);\r\n```\r\n\r\nContinue to add similar test data for better results. See our Recommendations Github repository at `https://github.com/josselaer/recommendations/` for our full test data.\r\n\r\n### Define Procedure\r\nNow, we will define a procedure which will be stored in a database. This procedure will return recommendations and their weight in descending order.\r\nAdd these lines of code to the same sql file.\r\n```\r\nDELIMITER // \r\n\tCREATE PROCEDURE \t`getRecommendation` (IN ProductNameParam varchar(100), UserIDParam int)\r\n\tLANGUAGE SQL\r\n\tDETERMINISTIC\r\n\tSQL \t\t\t\tSECURITY DEFINER\r\n\tCOMMENT \t\t\t'This procedure shall return a table with Product Names and their count in the Transaction Table.'\r\nBEGIN\r\n\tSELECT\t\tp2.ProductName, COUNT(*)\r\n\tFROM\t\tTransaction co2\r\n\tINNER JOIN\tProduct p2\r\n\tON\t\t\tco2.ProductID = p2.ProductID\r\n\tWHERE\t\tUserID IN (\r\n\t\t\t\t\t\t\tSELECT\t\tUserID\r\n\t\t\t\t\t\t\tFROM\t\tTransaction co \r\n\t\t\t\t\t\t\tINNER JOIN\tProduct p\r\n\t\t\t\t\t\t\tON\t\t\tco.ProductID = p.ProductID\r\n\t\t\t\t\t\t\tWHERE\t\tProductName = ProductNameParam \r\n\t\t\t\t\t\t\tAND \t\tUserID <> UserIDParam)\r\n\tAND\t\t\tp2.ProductName <> ProductNameParam\r\n\tGROUP BY\tp2.ProductName\r\n\tORDER BY\tCOUNT(*) DESC;\r\nEND//\r\nDELIMITER ;\r\n```\r\n\r\n### Map Database in src/settings.php\r\nThis section of the tutorial focuses on using the Slim framework.\r\n\r\nAdd These lines of code to your settings.php in the src directory.\r\n\r\n```\r\n'Recommender' => [\r\n\t\t\t'username' =>'testuser',\r\n\t\t\t'password' => 'test',\r\n\t\t\t'host' => 'localhost',\r\n\t\t\t'dbname' => 'Recommender',\r\n\t\t\t'db' => 'mysql',\r\n\t\t\r\n\t\t],\r\n```\r\n\r\n![settings.php](https://raw.githubusercontent.com/josselaer/recommendations/master/img/settings.png)\r\n\r\n### Create Recommender Container Function\r\nCreate the ‘Recommender’ container function in src/dependencies.php, so you are able to connect to the database.\r\n\r\n```\r\n$container['Recommender'] = function ($c){\r\n\t$settings = $c->get('settings')['Recommender'];\r\n\t\r\n\t$connString = $settings['db'] . ':host=' . $settings['host'];\r\n\t$connString .= ';dbname=' .$settings['dbname'] . ';charset=utf8mb4';\r\n\t\r\n\t$db = new PDO($connString, $settings['username'], $settings['password']);\r\n\t\r\n\treturn $db;\t\r\n};\r\n```\r\n\r\n### Edit the Endpoints in src/routes.php\r\nIn src/routes.php edit the endpoint. To use the Recommender function, simply establish a connection to the Recommender database and create a query object that uses the command “CALL getRecommendation ('$item',$user)”, where $user is the ID of the user you are looking to give recommendations to and $item is the name of his last bought item.\r\n\r\n```\r\n$app->get('/recommendations',\r\n\tfunction($request,$response,$args) {\r\n\t\t$db = $this->Recommender;\r\n\t\t$user=2;\r\n\t\t$item = 'Cat food';\r\n\t\t$query = $db->query(\"CALL getRecommendation ('$item',$user)\");\r\n\t\t$strToReturn = '';\r\n\r\n\t\t$returnArray=array();\r\n\t\tforeach ($query as $row) {\r\n\t\t\t$returnArray[$row['ProductName']] = $row['COUNT(*)'];\r\n\t\t}\r\n\t\treturn $response->write(json_encode($returnArray));\r\n\t}\t\r\n);\r\n```\r\n\r\nIn our example, we iterate through the query object and map the key value pairs for the array to display. Then we return the array, encoded in json, using the json_encode method.\r\n\r\n### Authors and Contributors\r\nJake Osselaer, Aakash Patel, Stefan Popov","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}